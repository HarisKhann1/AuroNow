1. Popularity-Based Recommendations (Landing Page or Shop Page)
✅ views.py

from django.db.models import Count, Q
from django.shortcuts import render
from .models import Service

# Global popular services
def get_popular_services(limit=5):
    return (
        Service.objects
        .annotate(total_bookings=Count('bookappointment', filter=Q(bookappointment__status='completed')))
        .order_by('-total_bookings')[:limit]
    )

# View for home page
def home(request):
    popular_services = get_popular_services(limit=5)
    return render(request, 'home.html', {'popular_services': popular_services})

<h2>Popular Services</h2>
<ul>
  {% for service in popular_services %}
    <li>
      <strong>{{ service.name }}</strong><br>
      Bookings: {{ service.total_bookings }}<br>
      Price: ${{ service.price }}
    </li>
  {% endfor %}
</ul>
------------------------------------------------------------------------------------------


✅ 2. Content-Based Recommendations (When Viewing a Service)
✅ utils.py
Create a file utils.py inside your app if it doesn’t exist:


import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from .models import Service

def get_similar_services(service_id, top_n=3):
    services = list(Service.objects.select_related('category'))

    df = pd.DataFrame([{
        'id': s.id,
        'name': s.name,
        'description': s.description or '',
        'category': s.category.name if s.category else '',
    } for s in services])

    df['text_features'] = df['category'] + ' ' + df['description']

    vectorizer = TfidfVectorizer(stop_words='english')
    tfidf_matrix = vectorizer.fit_transform(df['text_features'])
    cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

    try:
        index = df[df['id'] == service_id].index[0]
    except IndexError:
        return Service.objects.none()

    similarity_scores = list(enumerate(cosine_sim[index]))
    similarity_scores = sorted(similarity_scores, key=lambda x: x[1], reverse=True)
    similar_indices = [i for i, _ in similarity_scores[1:top_n+1]]

    similar_ids = df.iloc[similar_indices]['id'].tolist()
    return Service.objects.filter(id__in=similar_ids)

✅ views.py (Add to existing or new view)
from django.shortcuts import get_object_or_404, render
from .models import Service
from .utils import get_similar_services

def service_detail(request, service_id):
    service = get_object_or_404(Service, id=service_id)
    related_services = get_similar_services(service_id, top_n=3)
    return render(request, 'service_detail.html', {
        'service': service,
        'related_services': related_services
    })

<h2>{{ service.name }}</h2>
<p>{{ service.description }}</p>
<p>Price: ${{ service.price }}</p>

<h3>Related Services</h3>
<ul>
  {% for s in related_services %}
    <li>
      {{ s.name }} — ${{ s.price }}
    </li>
  {% endfor %}
</ul>

✅ service_detail.html

<h2>{{ service.name }}</h2>
<p>{{ service.description }}</p>
<p>Price: ${{ service.price }}</p>

<h3>Related Services</h3>
<ul>
  {% for s in related_services %}
    <li>
      {{ s.name }} — ${{ s.price }}
    </li>
  {% endfor %}
</ul>

